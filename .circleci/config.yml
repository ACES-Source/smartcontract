version: 2

defaults: &defaults
  machine:
      enabled: true

defaults-docker: &defaults-docker
  docker: 
    - image: circleci/buildpack-deps:bionic


run_apt_packages: &run_apt_packages 
  name: Prepare VM
  command: sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common git python3

set_python_version: &set_python_version
  name: Set Python Version
  command: pyenv global 3.5.2

run_base_setup: &run_base_setup
  name: Setup repo and execute VM builder
  command: ./gitian-build.py --docker --commit --setup marpme master

jobs:
  release-prepare-machine:
    <<: *defaults
    steps:
      - run:
          <<: *run_apt_packages
      - checkout:
          path: ~/project/verge
      - run:
          name: Hardcopy gitian build script
          command: cp ./verge/contrib/gitian-build.py . && chmod u+x gitian-build.py
      - run:
          name: Prepare VM Builder
          command: git clone https://github.com/newroco/vmbuilder.git && cd vmbuilder && sudo chmod u+x setup.py && sudo ./setup.py install
      - persist_to_workspace:
          root: "."
          paths:
            - "."

  release-windows:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          <<: *run_apt_packages
      - run:
          <<: *set_python_version
      - run:
          <<: *run_base_setup
      - run: 
          name: Gitian Build Windows
          command: ./gitian-build.py --docker --detach-sign -o w --commit -j 4 -m 4000 -b marpme master

  release-macos:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: 
          <<: *run_apt_packages
      - run:
          <<: *set_python_version
      - run:
          <<: *run_base_setup
      - run: 
          name: Add OSX SDK
          command: mkdir -p gitian-builder && cd ./gitian-builder && mkdir -p inputs && cd inputs && curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.11.sdk.tar.xz --output MacOSX10.11.sdk.tar.gz
      - run: 
          name: Gitian Build MacOS
          command: ./gitian-build.py --docker --detach-sign -o m --commit -j 4 -m 4000 -b marpme master
  
  release-linux:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: 
          <<: *run_apt_packages
      - run:
          <<: *set_python_version
      - run:
          <<: *run_base_setup
      - run: 
          name: Gitian Build Linux
          command: ./gitian-build.py --docker --detach-sign -o l --commit -j 4 -m 4000 -b marpme master

  test-setup-env: 
      <<: *defaults-docker
      steps:
        - checkout
        - run: 
            name: Hash dependencies
            command: md5sum depends/packages/* > hashes.run
        - restore_cache:
            key: source-depends-{{ checksum "./hashes.run" }}
            paths:
              - "./depends"
        - run: 
            name: Install dependencies
            command: sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils libattr1-dev make automake cmake curl g++-multilib binutils-gold python3
        - run:
            name: Creating depends
            command: cd depends/ && make -j4 HOST=x86_64-linux-gnu
        - save_cache:
            key: source-depends-{{ checksum "./hashes.run" }}
            paths:
              - "./depends"
        - persist_to_workspace:
            root: "."
            paths:
              - "."

  test-create-and-test-build: 
      <<: *defaults-docker
      steps:
        - attach_workspace:
            at: "." 
        - run: 
            name: Install dependencies
            command: sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3 libattr1-dev
        - run:
            name: Autogen tools
            command: ./autogen.sh
        - run:
            name: Configuring code
            command: ./configure --disable-bench --disable-dependency-tracking --disable-werror --prefix=`pwd`/depends/x86_64-linux-gnu --bindir=`pwd`/release/bin --libdir=`pwd`/release/lib
        - run:
            name: Make
            command: make -j4
        - run:
            name: Check binaries
            command: make check


workflows:
  version: 2
  release:
    jobs:
      - release-prepare-machine:
          filters:
            tags:
              only: /v[0-9]+\.[0-9]\.[0-9]-rc[1-9]/
      - release-windows:
          requires:
            - release-prepare-machine
          filters:
            tags:
              only: /v[0-9]+\.[0-9]\.[0-9]-rc[1-9]/
      - release-macos:
          requires:
            - release-prepare-machine
          filters:
            tags:
              only: /v[0-9]+\.[0-9]\.[0-9]-rc[1-9]/
      - release-linux:
          requires:
            - release-prepare-machine
          filters:
            tags:
              only: /v[0-9]+\.[0-9]\.[0-9]-rc[1-9]/
  testing:
    jobs:
      - test-setup-env
      - test-create-and-test-build:
          requires:
            - test-setup-env
